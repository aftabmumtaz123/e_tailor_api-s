const mongoose = require('mongoose');

const subscriptionSchema = new mongoose.Schema(
  {
    // Reference to the Tailor who owns this subscription
    tailorId: {
      type: mongoose.Schema.Types.ObjectId,
      ref: 'Tailor',
      index: true, // Index for lookups by tailor
    },

    // Name of the subscription plan
    planName: {
      type: String,
      trim: true,
      index: true, // Index for lookups
    },

    // Price per period (e.g., monthly fee)
    price: {
      type: Number,
      required: true
    },

    // Status of the subscription (updated to match dashboard: active/expired)
    status: {
      type: String,
      enum: {
        values: ['Active', 'Inactive']
      },
      default: 'Active',
      index: true, // Index for filtering active/expired
    },

    // Duration of the subscription in days
    duration: {
      type: Number,
      required: true
    },

    // Maximum number of customers allowed under this subscription
    maxCustomers: {
      type: Number,
      required:true,
    },

    // Description of the subscription plan
    description: {
      type: String,
      required: [true, 'Description is required'],
      trim: true,
      minlength: [10, 'Description must be at least 10 characters'],
      maxlength: [500, 'Description cannot exceed 500 characters'],
    },

    // Start date of the subscription
    startDate: {
      type: Date,
      default: Date.now,
    },

    // End date of the subscription (calculated based on duration)
    endDate: {
      type: Date,
    },

    // Total revenue generated by this subscription (calculated or fixed)
    revenue: {
      type: Number,
      default: function() {
        return this.price; // Default to price; can be updated via hook or manually
      },
      min: [0, 'Revenue cannot be negative'],
    },
  },
  { timestamps: true } // Adds createdAt and updatedAt
);

// Pre-save hook to manage endDate and revenue
subscriptionSchema.pre('save', function(next) {
  // Calculate endDate based on startDate and duration (in days)
  if (!this.endDate && this.startDate && this.duration) {
    this.endDate = new Date(this.startDate.getTime() + this.duration * 24 * 60 * 60 * 1000);
  }

  // Update status to 'expired' if endDate is past current date
  const now = new Date('2025-09-27T15:09:00+05:00'); // Current date: Sep 27, 2025, 03:09 PM PKT
  if (this.endDate && this.endDate < now && this.status !== 'expired') {
    this.status = 'expired';
  }

  // Optionally calculate revenue (e.g., price * duration if prorated; here kept simple as price)
  if (!this.isModified('revenue')) {
    this.revenue = this.price; // Default revenue to price; adjust if prorated logic is needed
  }

  next();
});

// Index for efficient querying by status and date
subscriptionSchema.index({ status: 1, endDate: 1 });

// Compound index for tailorId and status
subscriptionSchema.index({ tailorId: 1, status: 1 });

const Subscription = mongoose.model('Subscription', subscriptionSchema);

module.exports = Subscription;